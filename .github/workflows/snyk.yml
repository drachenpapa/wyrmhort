name: Snyk

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  snyk-scans:
    name: >
      ${{ matrix.component }} -
      ${{ matrix.scan == 'SAST' && 'Static Application Security Testing (SAST)' ||
          matrix.scan == 'SCA' && 'Software Composition Analysis (SCA)' ||
          matrix.scan == 'Docker' && 'Container Image Scan' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Backend SAST
          - component: backend
            scan: SAST
            working_dir: backend
            setup_action: ./.github/actions/backend-setup
            snyk_cmd: snyk code test --sarif-file-output=snyk-backend-sast.sarif
            sarif_file: snyk-backend-sast.sarif

          # Backend SCA
          - component: backend
            scan: SCA
            working_dir: backend
            setup_action: ./.github/actions/backend-setup
            snyk_cmd: snyk test --file=requirements.txt --sarif-file-output=snyk-backend-sca.sarif
            sarif_file: snyk-backend-sca.sarif

          # Backend Docker
          - component: backend
            scan: Docker
            working_dir: backend
            setup_action: ./.github/actions/backend-setup
            snyk_cmd: snyk container test wyrmhort-backend --severity-threshold=medium --sarif-file-output=snyk-docker.sarif
            sarif_file: snyk-docker.sarif

          # Frontend SAST
          - component: frontend
            scan: SAST
            working_dir: frontend
            setup_action: ./.github/actions/frontend-setup
            snyk_cmd: snyk code test --sarif-file-output=snyk-frontend-sast.sarif
            sarif_file: snyk-frontend-sast.sarif

          # Frontend SCA
          - component: frontend
            scan: SCA
            working_dir: frontend
            setup_action: ./.github/actions/frontend-setup
            snyk_cmd: snyk test --file=package.json --sarif-file-output=snyk-frontend-sca.sarif
            sarif_file: snyk-frontend-sca.sarif

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ${{ matrix.setup_action }}

      - name: Build Docker image
        if: ${{ matrix.scan == 'Docker' }}
        run: |
          echo "Building Docker image for backend..."
          docker build -t wyrmhort-backend -f Dockerfile .

      - name: Install Snyk CLI (with cache)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: snyk-cli-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Snyk
        run: npm install -g snyk

      # ✅ Dynamischer Step-Name für Scan
      - name: >
          ${{ matrix.scan == 'SAST' && 'Scan with SnykCode' ||
              matrix.scan == 'SCA' && 'Scan with Snyk Open Source' ||
              matrix.scan == 'Docker' && 'Scan with Snyk Container' }}
        run: |
          echo "Running ${{ matrix.scan }} scan for ${{ matrix.component }}"
          ${{ matrix.snyk_cmd }} || echo "SNYK_SCAN_FAILED" >> snyk_status.log
        working-directory: ${{ matrix.working_dir }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Check SARIF file
        id: check_sarif
        run: |
          if [ -f ${{ matrix.sarif_file }} ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload results
        if: steps.check_sarif.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.sarif_file }}

      - name: Fail if Critical/High Issues
        if: steps.check_sarif.outputs.exists == 'true'
        run: |
          high_issues=$(jq '[.runs[].results[] | select(.properties.severity=="high" or .properties.severity=="critical")] | length' ${{ matrix.sarif_file }})
          if [ "$high_issues" -gt 0 ]; then
            echo "❌ Found $high_issues High/Critical vulnerabilities"
            exit 1
          else
            echo "✅ No High/Critical issues found"
          fi
